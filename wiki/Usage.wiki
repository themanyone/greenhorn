#labels Featured,Phase-Implementation,Phase-Support
#Instructions for using Greenhorn

= Document Your Sources =

To add a documentation string to a Python module, enclose it in """triple-quotes"""

I have heard that this is the recommended way to document your code and you should be doing this anyway.

Example:

{{{
def get_dir(treeviewcolumn, cell_renderer, model, iter):
    """Callback to set text property to match treemodel data.
    
    The text may be different or contain extra style information
    but here we are setting it to be the same."""
    val = model.get_value(iter, 0)
    cell_renderer.set_property('text', str(val))
    return
}}}

= Browse Documentation =

./greenhorn

Displays interactive help for regular Python commands (also known as __builtins__).

./greenhorn gtk

Displays interactive help for the 'gtk' module.

= Details =

In order to display interactive help, the program must first load the module. There seems to be a bug with dynamic module loading, so modify the source to import additional modules that you may want interactive help on:

#~ import any modules you want to inspect
{{{
import sys,twitter,inspect,os
}}}
#~ global modules
{{{
import gtk
}}}

= Inspect Source Code =

This program evaluates and displays the output from the dir() command and outputs each functions .__doc__ string when tree items are clicked on. If local modules are imported, a source tab will appear, allowing you to browse source code on that item. For example:

./greenhorn self

If you use Greenhorn to inspect itself and search for any of the modules Greenhorn exports, such as entry_changed_cb, a source code tab will appear as a child. (Click the arrow and double-click on 'source' to see the listing.)

Source code browsing also works on other modules that have source code available. The Python 'inspect' module is one of them.

./greenhorn inspect

This is very handy if you often use other people's modules and can't find documentation for them.
